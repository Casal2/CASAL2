# Model configuration information
# @model
# years <start_year> <final_year>
# ages <min_age> <max_age>
# age_plus <bool>
# initialisation_phases <phase_list>
# time_steps <step_list>
@model
years 1999 2010 <Start_year> <End_year>
ages 1 50 <min_age> <max_age>
age_plus t
initialisation_phase iphase1 iphase2
time_steps tstep1 tstep2

# Category configuration information
# @categories
# format <format_string>
# names <name_list>
# years <years_list>
# ages <ages_list>
# age_size <age_size_list>
#
# Format: 
# The format is a single that uses a period {.} to define different levels of the category name
# E.g level_1.level_2.level_3
# The levels are user-defined and they can have as many as possible. 
#
# NOTE: The example cases below assume a format of:
# format sex.age.tag
# where sex's will be male and female
# age's will be immature and mature
# tag's will range 2000-2010
#
# Names:
# This is a list of category names to use for iSAM. The categories should follow the same syntax as the category
# format from left to right.
# e.g
# names male.immature == Valid
# names male.immature.1999 == Valid
# names male.immature.1999.A == Invalid
# names immature.1999 == Valid, but it'd be incorrect within the model because it's not a left->right definition
#
# Some examples of defining names using a short-hand syntax:
# e.g 
# names male.immature.2001-2003 <is equal to>
# names male.immature.2001 male.immature.2002 male.immature.2003
# <and>
# names male.mature.2001,2003,2005 <is equal to>
# names male.mature.2001 male.mature.2003 male.mature.2005
#
#
# NOTE: The following commands use a pattern recognition system to apply the rules. The rules will be valid
# as long as they cover all categories that have been generated. Examples will be given
#
# Years:
# Specifies what years the matching category definition is active for. This also supports some short-hand
# syntax to make it easier to define rules for large numbers of categories
# e.g: <assuming categories have sex male and female only>
# years sex:male=* sex:female=* #Valid. Both sex's are always available
# years sex:*=* #Valid. Same effect as above
# years sex:male=2000-2010 sex:female=2000-2005 #Valid female is only available 2000 - 2005
# years sex:male=* #Invalid. Have no specified rules for sex:female
# years tag:*=model.year #Valid as long as every category has a tag specified
# years sex:*=* tag:*=model.year #Valid. Rules are applied left to right. Tags are valid in the year specified. Non-tag categories always available
#
# Ages:
# Specifies what ages each category will have. The same short-hand syntax and rules apply as for Years
# e.g.
# ages sex:male=1-50 sex:female=1-25

# Some sample definitions that are valid:

# The following 2 definitions achieve the exact same thing. One uses short-hand, the other does not
@categories
names male.immature.2000 male.immature.2001 male.immature.2002 male.mature.2000 male.mature.2001 male.mature.2002
years 2000 2001 2002 2000 2001 2002
ages 1-35 1-35 1-35 15-50 15-50 15-50
age_size none # applied to all

# Short-Hand
@categories
names male.immature,mature.2000-2002
years tag:*=model.year
ages age:immature=1-35 age:mature=15-50
age_size none # applied to all

# The following definition will create around 40 categories.
# Immature fish are limited to ages 1-20
# Mature fish are limited to ages 15-50
# unsexed fish data is only available during years 2000-2005 as immature(and has no tagging data)
# Tagging data exists only after 2005
# Model run is 2000 - 2010
@categories
format sex.age.tag 
names male,female.immature,mature male,female.immature,mature.2005-2010 unsexed.immature
years sex:*=* tag:*=model.year sex:unsexed=2000-2005
ages age:immature=1-20 age:mature=15-50
age_size sex:*=none

# Breaking down the names arguement into 3 statements in long-form would look like:
# names male,female.immature,mature  <is equal to>
names male.immature male.mature female.immature female.mature
# names male,female.immature,mature.2005-2010 <is equal to>
names male.immature.2005 male.immature.2006 male.immature.2007 male.immature.2008 male.immature.2009 male.immature.2010
      male.mature.2005 male.mature.2006 male.mature.2007 male.mature.2008 male.mature.2009 male.mature.2010
      female.immature.2005 female.immature.2006 female.immature.2007 female.immature.2008 female.immature.2009 female.immature.2010
      female.mature.2005 female.mature.2006 female.mature.2007 female.mature.2008 female.mature.2009 female.mature.2010      
# names unsexed.immature <is equal to>
names unsexed.immature
      
# So:
# names male,female.immature,mature male,female.immature,mature.2005-2010 unsexed.immature <is equal to>
names male.immature male.mature female.immature female.mature
      male.immature.2005 male.immature.2006 male.immature.2007 male.immature.2008 male.immature.2009 male.immature.2010
      male.mature.2005 male.mature.2006 male.mature.2007 male.mature.2008 male.mature.2009 male.mature.2010
      female.immature.2005 female.immature.2006 female.immature.2007 female.immature.2008 female.immature.2009 female.immature.2010
      female.mature.2005 female.mature.2006 female.mature.2007 female.mature.2008 female.mature.2009 female.mature.2010      
      unsexed.immature

      
# Looking forward. It'd be possible to do something like:
@process
type constant_recruitment
r0 10000
categories age:immature

# And
@observation
type proportion_at_age
categories sex:male sex:female


